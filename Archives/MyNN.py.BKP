import numpy as np
from KerasNN import Neural_Network as kNN
from plotting import myplot, myfigshow

class Neural_Network:
    '''

    Neural_Network <Class>: Class containing the Neural Network used to learn the features

    '''
    
    
    def __init__(self, NNconfig):
        '''

        __init__<Function>: Initialization for Neural_Network class

        - args:
          |- NNconfig <dictionary>: Contains the configuration for the Neural Network
             |- {"layers" : <int List>}: Contains the number of neurons in every hidden layer
             |- {"nfeatures" : <int>}: Number of features

        - kwargs:
          |- None

        - return value:
          |- None

        '''

        self.nLayers          = np.shape(NNconfig["layers"])[0]
        '''

        nLayers <int>: Number of layers in the Neural Network

        '''

        self.nNeurons         = NNconfig["layers"]
        '''

        nNeurons <int List>: Number of neurons in all the hidden layers

        '''

        self.nFeatures        = NNconfig["nfeatures"]
        '''

        nFeatures <int>: Number of features required for Neural Network

        '''
        
        self.nWeights         = (self.nFeatures + 1) * self.nNeurons[0]
        '''

        nWeights <int>: Number of weights+biases for the Neural Network

        '''

        self.kerasNN = kNN({'layers':self.nNeurons, 'n_epochs':500, 'batch_size':30, 'nfeatures':self.nFeatures, 'validation_split':0.0, 'lr':0.02})
        self.kerasNN.set_weights_from_array(np.random.random((np.size(self.kerasNN.get_array_from_list(self.kerasNN.model.get_weights())))))
        
        self.weights = None
        '''

        weights <1-D NumPy array>: Weights and Biases for the Neural Network

        '''


    
    def init_weights(self, features):
        
        beta = np.zeros((np.shape(features)[0]))
        self.kerasNN.train(beta, features, verbose=1, plot=False)
        self.weights = self.kerasNN.get_array_from_list(self.kerasNN.model.get_weights())
        outputs = self.predict(features, self.weights)
        myplot(1, np.linspace(1, np.size(outputs), np.size(outputs)), outputs, '-b', 2., None)
        outputs = self.kerasNN.predict(features) + 1.
        myplot(1, np.linspace(1, np.size(outputs), np.size(outputs)), outputs, '-r', 2., None)
        myfigshow()

    

    def predict(self, features, weights):
        '''

        predict<Function>: Prediction function from Neural Network

        - args:
          |- features <2-D NumPy array>: Features for the Neural Network
          |- weights <1-D NumPy array>: Weights and Biases for the Neural Network

        - kwargs:
          |- None

        - return value:
          |- output <1-D NumPy array>

        '''
        
        prev_layer_nNeurons   = self.nFeatures
        start = 0
        inputs = np.copy(features)
        nData = np.shape(inputs)[0]

        for iLayer in range(self.nLayers):

            weights_end   = start       + self.nNeurons[iLayer] * prev_layer_nNeurons
            biases_end    = weights_end + self.nNeurons[iLayer]
            
            weight_matrix = np.reshape(weights[start:weights_end], (prev_layer_nNeurons,self.nNeurons[iLayer]))
            
            outputs       = np.zeros((nData, self.nNeurons[iLayer]), dtype=weights.dtype)
            
            for iNeuron in range(self.nNeurons[iLayer]):
                    
                for iData in range(nData):
                    
                    outputs[iData, iNeuron] = weights[weights_end+iNeuron]

                    for iPrevNeuron in range(prev_layer_nNeurons):

                        outputs[iData, iNeuron] = outputs[iData, iNeuron] +\
                                                 weight_matrix[iPrevNeuron,iNeuron] * inputs[iData,iPrevNeuron]
            
            outputs[outputs<0.0] = 0.0
            prev_layer_nNeurons = self.nNeurons[iLayer]
            start = biases_end
            inputs = outputs
        
        outputs = np.zeros((nData), dtype=weights.dtype)

        for iData in range(nData):
                    
            outputs[iData] = weights[-1]

            for iPrevNeuron in range(prev_layer_nNeurons):

                outputs[iData] = outputs[iData] + weights[start+iPrevNeuron]*inputs[iData, iPrevNeuron]

        #outputs[outputs<0.0] = 0.0

        return outputs + 1.

if __name__=="__main__":
    
    NNconfig = {"layers":[4,4,3], "nfeatures":3}
    NN = Neural_Network(NNconfig)
    NN.init_weights(np.random.random((40,3)))
    print(NN.kerasNN.model.get_weights())
